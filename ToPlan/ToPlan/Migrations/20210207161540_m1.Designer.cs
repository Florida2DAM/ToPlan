// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToPlan.Models;

namespace ToPlan.Migrations
{
    [DbContext(typeof(ToPlanContext))]
    [Migration("20210207161540_m1")]
    partial class m1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ToPlan.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("EventDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ListMembers")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("int");

                    b.Property<string>("Province")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TypePlanId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("EventId");

                    b.HasIndex("TypePlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ToPlan.Models.TypePlan", b =>
                {
                    b.Property<int>("TypePlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subtype")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("TypePlanId");

                    b.ToTable("TypePlans");
                });

            modelBuilder.Entity("ToPlan.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Admin")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FechaNacimiento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Preferences")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ToPlan.Models.Event", b =>
                {
                    b.HasOne("ToPlan.Models.TypePlan", "TypePlans")
                        .WithMany("Events")
                        .HasForeignKey("TypePlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToPlan.Models.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
